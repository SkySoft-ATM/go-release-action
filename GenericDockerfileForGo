FROM eu.gcr.io/sk-registry/go-baseimage:0.0.20 AS build

# generate ~/.git-credentials so dep can download dependencies from private repo
ARG GITHUB_USER
ARG GITHUB_TOKEN
ARG BUILD_VERSION
ARG APP_NAME
ARG APP_DESCRIPTION
ARG MAIN_FOLDER
ARG GOSEC_OPTS
ARG SKIP_GOVET
ARG SKIP_STATICCHECK
ARG SKIP_GOSEC
ARG SKIP_TESTS
RUN git config --global credential.helper store && echo "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com" > ~/.git-credentials

WORKDIR /go/src/github.com/skysoft-atm/${APP_NAME}


ENV GOPRIVATE=github.com/skysoft-atm
# Dowload all deps at this step so they can be cached for the next build
COPY go.mod .
COPY go.sum .
RUN go mod download
RUN go mod verify

COPY . .
RUN if [ "$SKIP_GOVET" = "true" ] ; then echo "Skipping go vet" ; else go vet ./... ; fi
# RUN go vet ./...
RUN if [ "$SKIP_STATICCHECK" = "true" ] ; then echo "Skipping staticcheck" ; else /usr/bin/staticcheck ./... ; fi
# RUN /usr/bin/staticcheck ./...
RUN if [ "$SKIP_GOSEC" = "true" ] ; then echo "Skipping gosec" ; else /usr/bin/gosec ${GOSEC_OPTS} ./... ; fi
# RUN /usr/bin/gosec ${GOSEC_OPTS} ./...
RUN if [ "$SKIP_TESTS" = "true" ] ; then echo "Skipping tests" ; else go test ./... -race ; fi
# RUN go test ./... -race
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X 'github.com/skysoft-atm/gorillaz.ApplicationVersion=${BUILD_VERSION}' -X 'github.com/skysoft-atm/gorillaz.ApplicationName=${APP_NAME}' -X 'github.com/skysoft-atm/gorillaz.ApplicationDescription=${APP_DESCRIPTION}' -w -s" -o /go/bin/${APP_NAME} ${MAIN_FOLDER}

FROM scratch
ARG APP_NAME

# Import the TLS root certificates
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Import timeinfo
COPY --from=build /usr/share/zoneinfo /usr/share/zoneinfo

# Import the user and group files from the builder.
COPY --from=build /etc/minimal_passwd /etc/passwd

COPY --from=build /go/bin/${APP_NAME} /go/bin/${APP_NAME}
COPY --from=build /go/src/github.com/skysoft-atm/${APP_NAME}/IncludeInFinalDockerImage/ ./
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Use an unprivileged user.
USER appuser
